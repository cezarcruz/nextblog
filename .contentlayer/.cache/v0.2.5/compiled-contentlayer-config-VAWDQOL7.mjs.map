{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/remark-extract-frontmatter.ts", "../../../lib/remark-code-title.ts", "../../../lib/remark-toc-headings.ts", "../../../lib/remark-img-to-jsx.ts"],
  "sourcesContent": ["import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer/source-files'\nimport readingTime from 'reading-time'\nimport path from 'path'\n// Remark packages\nimport remarkGfm from 'remark-gfm'\nimport remarkFootnotes from 'remark-footnotes'\nimport remarkMath from 'remark-math'\nimport remarkExtractFrontmatter from './lib/remark-extract-frontmatter'\nimport remarkCodeTitles from './lib/remark-code-title'\nimport { extractTocHeadings } from './lib/remark-toc-headings'\nimport remarkImgToJsx from './lib/remark-img-to-jsx'\n// Rehype packages\nimport rehypeSlug from 'rehype-slug'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypeKatex from 'rehype-katex'\nimport rehypeCitation from 'rehype-citation'\nimport rehypePrismPlus from 'rehype-prism-plus'\nimport rehypePresetMinify from 'rehype-preset-minify'\n\nconst root = process.cwd()\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n}\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: 'blog/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' } },\n    lastmod: { type: 'date' },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n    images: { type: 'list', of: { type: 'string' } },\n    authors: { type: 'list', of: { type: 'string' } },\n    layout: { type: 'string' },\n    bibliography: { type: 'string' },\n    canonicalUrl: { type: 'string' },\n  },\n  computedFields,\n}))\n\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Blog, Authors],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      [remarkFootnotes, { inlineNotes: true }],\n      remarkMath,\n      remarkImgToJsx,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeKatex,\n      [rehypeCitation, { path: path.join(root, 'data') }],\n      [rehypePrismPlus, { ignoreMissing: true }],\n      rehypePresetMinify,\n    ],\n  },\n})\n", "import { Parent } from 'unist'\nimport { VFile } from 'vfile'\nimport { visit } from 'unist-util-visit'\nimport yaml from 'js-yaml'\n\nexport default function extractFrontmatter() {\n  return (tree: Parent, file: VFile) => {\n    visit(tree, 'yaml', (node: Parent) => {\n      //@ts-ignore\n      file.data.frontmatter = yaml.load(node.value)\n    })\n  }\n}\n", "import { Parent } from 'unist'\nimport { visit } from 'unist-util-visit'\n\nexport default function remarkCodeTitles() {\n  return (tree: Parent & { lang?: string }) =>\n    visit(tree, 'code', (node: Parent & { lang?: string }, index, parent: Parent) => {\n      const nodeLang = node.lang || ''\n      let language = ''\n      let title = ''\n\n      if (nodeLang.includes(':')) {\n        language = nodeLang.slice(0, nodeLang.search(':'))\n        title = nodeLang.slice(nodeLang.search(':') + 1, nodeLang.length)\n      }\n\n      if (!title) {\n        return\n      }\n\n      const className = 'remark-code-title'\n\n      const titleNode = {\n        type: 'mdxJsxFlowElement',\n        name: 'div',\n        attributes: [{ type: 'mdxJsxAttribute', name: 'className', value: className }],\n        children: [{ type: 'text', value: title }],\n        data: { _xdmExplicitJsx: true },\n      }\n\n      parent.children.splice(index, 0, titleNode)\n      node.lang = language\n    })\n}\n", "import { VFile } from 'vfile'\nimport { Parent } from 'unist'\nimport { visit } from 'unist-util-visit'\nimport { Heading } from 'mdast'\nimport slugger from 'github-slugger'\nimport { toString } from 'mdast-util-to-string'\nimport { remark } from 'remark'\nimport { Toc } from 'types/Toc'\n\nexport function remarkTocHeadings() {\n  return (tree: Parent, file: VFile) => {\n    const toc: Toc = []\n    visit(tree, 'heading', (node: Heading) => {\n      const textContent = toString(node)\n      toc.push({\n        value: textContent,\n        url: '#' + slugger.slug(textContent),\n        depth: node.depth,\n      })\n    })\n    file.data.toc = toc\n  }\n}\n\n/**\n *\n * @param {string} markdown\n * @return {Toc} toc\n */\nexport async function extractTocHeadings(markdown) {\n  const vfile = await remark().use(remarkTocHeadings).process(markdown)\n  return vfile.data.toc\n}\n", "import { Parent, Node, Literal } from 'unist'\nimport { visit } from 'unist-util-visit'\nimport sizeOf from 'image-size'\nimport fs from 'fs'\n\ntype ImageNode = Parent & {\n  url: string\n  alt: string\n  name: string\n  attributes: (Literal & { name: string })[]\n}\n\nexport default function remarkImgToJsx() {\n  return (tree: Node) => {\n    visit(\n      tree,\n      // only visit p tags that contain an img element\n      (node: Parent): node is Parent =>\n        node.type === 'paragraph' && node.children.some((n) => n.type === 'image'),\n      (node: Parent) => {\n        const imageNode = node.children.find((n) => n.type === 'image') as ImageNode\n\n        // only local files\n        if (fs.existsSync(`${process.cwd()}/public${imageNode.url}`)) {\n          const dimensions = sizeOf(`${process.cwd()}/public${imageNode.url}`)\n\n          // Convert original node to next/image\n          ;(imageNode.type = 'mdxJsxFlowElement'),\n            (imageNode.name = 'Image'),\n            (imageNode.attributes = [\n              { type: 'mdxJsxAttribute', name: 'alt', value: imageNode.alt },\n              { type: 'mdxJsxAttribute', name: 'src', value: imageNode.url },\n              { type: 'mdxJsxAttribute', name: 'width', value: dimensions.width },\n              { type: 'mdxJsxAttribute', name: 'height', value: dimensions.height },\n            ])\n\n          // Change node type from p to div to avoid nesting error\n          node.type = 'div'\n          node.children = [imageNode]\n        }\n      }\n    )\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
